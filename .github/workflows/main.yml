# MegaLinter GitHub Action configuration file
# More info at https://oxsecurity.github.io/megalinter
name: API Doc validation and integration with Devone

on:
  # Trigger mega-linter at every push. Action will also be visible from Pull Requests to main
  #push: # Comment this line to trigger action only on pull-requests (not recommended if you don't pay for GH Actions)
  pull_request:
    branches: [master, main]

#env: # Comment env block if you do not want to apply fixes
  # Apply linter fixes configuration
  #APPLY_FIXES: all # When active, APPLY_FIXES must also be defined as environment variable (in github/workflows/mega-linter.yml or other CI tool)
  #APPLY_FIXES_EVENT: push # Decide which event triggers application of fixes in a commit or a PR (pull_request, push, all)
  #APPLY_FIXES_MODE: commit # If APPLY_FIXES is used, defines if the fixes are directly committed (commit) or posted in a PR (pull_request)

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    name: MegaLinter
    runs-on: ubuntu-latest
    steps:
      # Git Checkout
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      # MegaLinter
      - name: MegaLinter - API Format validation
        id: ml
        # You can override MegaLinter flavor used to have faster performances
        # More info at https://oxsecurity.github.io/megalinter/flavors/
        uses:  oxsecurity/megalinter@v6
        env:
          # All available variables are described in documentation
          # https://oxsecurity.github.io/megalinter/configuration/
          #VALIDATE_ALL_CODEBASE: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }} # Validates all source when push on main, else just the git diff with main. Override with true if you always want to lint all sources
          
          VALIDATE_ALL_CODEBASE: false
          GITHUB_TOKEN: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          OPENAPI_SPECTRAL_FILTER_REGEX_INCLUDE: .*api\/(.*)\.yaml #analyze all .yaml files under the api directory when workflow triggers
          OPENAPI_SPECTRAL_CLI_LINT_MODE: file
          OPENAPI_SPECTRAL_FILE_EXTENSIONS: ".yaml"
          OPENAPI_SPECTRAL_CONFIG_FILE: "validation/yamlSchema/openapi/validation-rules.yaml"  #path of the file where custom rules are defined
          ENABLE_LINTERS: OPENAPI_SPECTRAL         
          PRINT_ALPACA: false
          
  Webhook:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Call Webhook
        uses: distributhor/workflow-webhook@v2.0.3
        env:
         webhook_type: 'json-extended'
         webhook_url: ${{ secrets.WEBHOOK_URL }}
         webhook_secret: ${{ secrets.WEBHOOK_SECRET }}        
